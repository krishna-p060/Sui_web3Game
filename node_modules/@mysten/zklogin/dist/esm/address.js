import { computeZkLoginAddressFromSeed } from "@mysten/sui.js/zklogin";
import { decodeJwt } from "jose";
import { genAddressSeed } from "./utils.js";
function jwtToAddress(jwt, userSalt) {
  const decodedJWT = decodeJwt(jwt);
  if (!decodedJWT.sub || !decodedJWT.iss || !decodedJWT.aud) {
    throw new Error("Missing jwt data");
  }
  if (Array.isArray(decodedJWT.aud)) {
    throw new Error("Not supported aud. Aud is an array, string was expected.");
  }
  return computeZkLoginAddress({
    userSalt,
    claimName: "sub",
    claimValue: decodedJWT.sub,
    aud: decodedJWT.aud,
    iss: decodedJWT.iss
  });
}
function computeZkLoginAddress({
  claimName,
  claimValue,
  iss,
  aud,
  userSalt
}) {
  return computeZkLoginAddressFromSeed(genAddressSeed(userSalt, claimName, claimValue, aud), iss);
}
export {
  computeZkLoginAddress,
  jwtToAddress
};
//# sourceMappingURL=address.js.map
