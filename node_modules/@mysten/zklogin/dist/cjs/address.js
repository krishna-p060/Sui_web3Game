"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var address_exports = {};
__export(address_exports, {
  computeZkLoginAddress: () => computeZkLoginAddress,
  jwtToAddress: () => jwtToAddress
});
module.exports = __toCommonJS(address_exports);
var import_zklogin = require("@mysten/sui.js/zklogin");
var import_jose = require("jose");
var import_utils = require("./utils.js");
function jwtToAddress(jwt, userSalt) {
  const decodedJWT = (0, import_jose.decodeJwt)(jwt);
  if (!decodedJWT.sub || !decodedJWT.iss || !decodedJWT.aud) {
    throw new Error("Missing jwt data");
  }
  if (Array.isArray(decodedJWT.aud)) {
    throw new Error("Not supported aud. Aud is an array, string was expected.");
  }
  return computeZkLoginAddress({
    userSalt,
    claimName: "sub",
    claimValue: decodedJWT.sub,
    aud: decodedJWT.aud,
    iss: decodedJWT.iss
  });
}
function computeZkLoginAddress({
  claimName,
  claimValue,
  iss,
  aud,
  userSalt
}) {
  return (0, import_zklogin.computeZkLoginAddressFromSeed)((0, import_utils.genAddressSeed)(userSalt, claimName, claimValue, aud), iss);
}
//# sourceMappingURL=address.js.map
